{"ast":null,"code":"// const comments = (state = [], action) => {\n//   switch (action.type) {\n//     case \"COMMENTS_RECEIVED\": {\n//       const commentsWithoutReplies = action.payload.comments.reduce(\n//         (acc, comm) => {\n//           const { replies, ...commentWithoutReplies } = comm;\n//           return acc.concat(commentWithoutReplies);\n//         },\n//         []\n//       );\n//       console.log(commentsWithoutReplies);\n//       console.log(action.payload.comments);\n//       return commentsWithoutReplies;\n//     }\n//     default: {\n//       return state;\n//     }\n//     case \"COMMENT_ADDED\": {\n//       return state.concat(action.payload.newComment);\n//     }\n//   }\n// };\n// export default comments;\nimport { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nconst initialState = [];\nexport const fetchComments = createAsyncThunk(\"comments/fetchComments\", async () => {\n  const {\n    data\n  } = await axios.get(\"/api/comments\");\n  console.log(data);\n  return data;\n});\nconst commentSlice = createSlice({\n  name: \"comments\",\n  initialState,\n  reducers: {\n    createComment(state, action) {\n      state.push(action.payload);\n    }\n\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchComments.fulfilled, (state, action) => {\n      return action.payload.reduce((acc, comm) => {\n        const {\n          replies,\n          ...commentWithout\n        } = comm;\n        return acc.concat(commentWithout);\n      }, []);\n    });\n  } // extraReducers: {\n  //   [fetchComments.fulfilled]: (state, action) => {\n  //     return action.payload.reduce((acc, comm) => {\n  //       const { replies, ...commentWithout } = comm;\n  //       return acc.concat(commentWithout);\n  //     }, []);\n  //   },\n  // },\n\n});\nexport const {\n  createComment\n} = commentSlice.actions;\nexport default commentSlice.reducer;","map":{"version":3,"sources":["/Users/srdjancoric/Dropbox/Capstone_Support_Final/2205/comments_exercise_boilerplate/client/src/lib/reducers/comments.js"],"names":["createSlice","createAsyncThunk","axios","initialState","fetchComments","data","get","console","log","commentSlice","name","reducers","createComment","state","action","push","payload","extraReducers","builder","addCase","fulfilled","reduce","acc","comm","replies","commentWithout","concat","actions","reducer"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,MAAMC,YAAY,GAAG,EAArB;AAEA,OAAO,MAAMC,aAAa,GAAGH,gBAAgB,CAC3C,wBAD2C,EAE3C,YAAY;AACV,QAAM;AAAEI,IAAAA;AAAF,MAAW,MAAMH,KAAK,CAACI,GAAN,CAAU,eAAV,CAAvB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACA,SAAOA,IAAP;AACD,CAN0C,CAAtC;AASP,MAAMI,YAAY,GAAGT,WAAW,CAAC;AAC/BU,EAAAA,IAAI,EAAE,UADyB;AAE/BP,EAAAA,YAF+B;AAG/BQ,EAAAA,QAAQ,EAAE;AACRC,IAAAA,aAAa,CAACC,KAAD,EAAQC,MAAR,EAAgB;AAC3BD,MAAAA,KAAK,CAACE,IAAN,CAAWD,MAAM,CAACE,OAAlB;AACD;;AAHO,GAHqB;AAQ/BC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CAACC,OAAR,CAAgBf,aAAa,CAACgB,SAA9B,EAAyC,CAACP,KAAD,EAAQC,MAAR,KAAmB;AAC1D,aAAOA,MAAM,CAACE,OAAP,CAAeK,MAAf,CAAsB,CAACC,GAAD,EAAMC,IAAN,KAAe;AAC1C,cAAM;AAAEC,UAAAA,OAAF;AAAW,aAAGC;AAAd,YAAiCF,IAAvC;AACA,eAAOD,GAAG,CAACI,MAAJ,CAAWD,cAAX,CAAP;AACD,OAHM,EAGJ,EAHI,CAAP;AAID,KALD;AAMD,GAf8B,CAgB/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAvB+B,CAAD,CAAhC;AA0BA,OAAO,MAAM;AAAEb,EAAAA;AAAF,IAAoBH,YAAY,CAACkB,OAAvC;AACP,eAAelB,YAAY,CAACmB,OAA5B","sourcesContent":["// const comments = (state = [], action) => {\n//   switch (action.type) {\n//     case \"COMMENTS_RECEIVED\": {\n//       const commentsWithoutReplies = action.payload.comments.reduce(\n//         (acc, comm) => {\n//           const { replies, ...commentWithoutReplies } = comm;\n//           return acc.concat(commentWithoutReplies);\n//         },\n//         []\n//       );\n//       console.log(commentsWithoutReplies);\n//       console.log(action.payload.comments);\n//       return commentsWithoutReplies;\n//     }\n//     default: {\n//       return state;\n//     }\n//     case \"COMMENT_ADDED\": {\n//       return state.concat(action.payload.newComment);\n//     }\n//   }\n// };\n\n// export default comments;\n\nimport { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\nconst initialState = [];\n\nexport const fetchComments = createAsyncThunk(\n  \"comments/fetchComments\",\n  async () => {\n    const { data } = await axios.get(\"/api/comments\");\n    console.log(data);\n    return data;\n  }\n);\n\nconst commentSlice = createSlice({\n  name: \"comments\",\n  initialState,\n  reducers: {\n    createComment(state, action) {\n      state.push(action.payload);\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(fetchComments.fulfilled, (state, action) => {\n      return action.payload.reduce((acc, comm) => {\n        const { replies, ...commentWithout } = comm;\n        return acc.concat(commentWithout);\n      }, []);\n    });\n  },\n  // extraReducers: {\n  //   [fetchComments.fulfilled]: (state, action) => {\n  //     return action.payload.reduce((acc, comm) => {\n  //       const { replies, ...commentWithout } = comm;\n  //       return acc.concat(commentWithout);\n  //     }, []);\n  //   },\n  // },\n});\n\nexport const { createComment } = commentSlice.actions;\nexport default commentSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}
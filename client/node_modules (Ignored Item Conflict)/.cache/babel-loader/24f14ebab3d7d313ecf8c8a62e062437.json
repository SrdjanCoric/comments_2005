{"ast":null,"code":"// const comments = (state = [], action) => {\n//   switch (action.type) {\n//     case \"COMMENTS_RECEIVED\": {\n//       const commentsWithoutReplies = action.payload.reduce((acc, comment) => {\n//         const { replies, ...commentWithoutReplies } = comment;\n//         return acc.concat(commentWithoutReplies);\n//       }, []);\n//       return commentsWithoutReplies;\n//     }\n//     case \"COMMENT_ADDED\": {\n//       return state.concat(action.payload);\n//     }\n//     default: {\n//       return state;\n//     }\n//   }\n// };\n// export default comments;\nimport { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport apiClient from \"../ApiClient\";\nconst initialState = [];\nexport const fetchComments = createAsyncThunk(\"fetchComments\", async () => {\n  const data = apiClient.getComments();\n  return data;\n});\nexport const addComment = createAsyncThunk(\"addComment\", async newComment => {\n  const data = apiClient.addComment(newComment);\n  return data;\n});\nconst commentSlice = createSlice({\n  name: \"comment\",\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [fetchComments.fulfilled]: (state, action) => {\n      const commentsWithoutReplies = action.payload.reduce((acc, comment) => {\n        const {\n          replies,\n          ...commentWithoutReplies\n        } = comment;\n        return acc.concat(commentWithoutReplies);\n      }, []);\n      return commentsWithoutReplies;\n    },\n    [addComment.fulfilled]: (state, action) => {\n      state.push(action.payload);\n    }\n  }\n});\nexport default commentSlice.reducer;","map":{"version":3,"sources":["/Users/srdjancoric/Dropbox/Capstone_Support_Final/2205/comments_exercise_boilerplate/client/src/lib/reducers/comments.js"],"names":["createSlice","createAsyncThunk","apiClient","initialState","fetchComments","data","getComments","addComment","newComment","commentSlice","name","reducers","extraReducers","fulfilled","state","action","commentsWithoutReplies","payload","reduce","acc","comment","replies","commentWithoutReplies","concat","push","reducer"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AACA,OAAOC,SAAP,MAAsB,cAAtB;AAEA,MAAMC,YAAY,GAAG,EAArB;AAEA,OAAO,MAAMC,aAAa,GAAGH,gBAAgB,CAAC,eAAD,EAAkB,YAAY;AACzE,QAAMI,IAAI,GAAGH,SAAS,CAACI,WAAV,EAAb;AACA,SAAOD,IAAP;AACD,CAH4C,CAAtC;AAKP,OAAO,MAAME,UAAU,GAAGN,gBAAgB,CAAC,YAAD,EAAe,MAAOO,UAAP,IAAsB;AAC7E,QAAMH,IAAI,GAAGH,SAAS,CAACK,UAAV,CAAqBC,UAArB,CAAb;AACA,SAAOH,IAAP;AACD,CAHyC,CAAnC;AAKP,MAAMI,YAAY,GAAGT,WAAW,CAAC;AAC/BU,EAAAA,IAAI,EAAE,SADyB;AAE/BP,EAAAA,YAF+B;AAG/BQ,EAAAA,QAAQ,EAAE,EAHqB;AAI/BC,EAAAA,aAAa,EAAE;AACb,KAACR,aAAa,CAACS,SAAf,GAA2B,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC5C,YAAMC,sBAAsB,GAAGD,MAAM,CAACE,OAAP,CAAeC,MAAf,CAAsB,CAACC,GAAD,EAAMC,OAAN,KAAkB;AACrE,cAAM;AAAEC,UAAAA,OAAF;AAAW,aAAGC;AAAd,YAAwCF,OAA9C;AACA,eAAOD,GAAG,CAACI,MAAJ,CAAWD,qBAAX,CAAP;AACD,OAH8B,EAG5B,EAH4B,CAA/B;AAIA,aAAON,sBAAP;AACD,KAPY;AAQb,KAACT,UAAU,CAACM,SAAZ,GAAwB,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACzCD,MAAAA,KAAK,CAACU,IAAN,CAAWT,MAAM,CAACE,OAAlB;AACD;AAVY;AAJgB,CAAD,CAAhC;AAkBA,eAAeR,YAAY,CAACgB,OAA5B","sourcesContent":["// const comments = (state = [], action) => {\n//   switch (action.type) {\n//     case \"COMMENTS_RECEIVED\": {\n//       const commentsWithoutReplies = action.payload.reduce((acc, comment) => {\n//         const { replies, ...commentWithoutReplies } = comment;\n//         return acc.concat(commentWithoutReplies);\n//       }, []);\n//       return commentsWithoutReplies;\n//     }\n//     case \"COMMENT_ADDED\": {\n//       return state.concat(action.payload);\n//     }\n//     default: {\n//       return state;\n//     }\n//   }\n// };\n\n// export default comments;\n\nimport { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport apiClient from \"../ApiClient\";\n\nconst initialState = [];\n\nexport const fetchComments = createAsyncThunk(\"fetchComments\", async () => {\n  const data = apiClient.getComments();\n  return data;\n});\n\nexport const addComment = createAsyncThunk(\"addComment\", async (newComment) => {\n  const data = apiClient.addComment(newComment);\n  return data;\n});\n\nconst commentSlice = createSlice({\n  name: \"comment\",\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [fetchComments.fulfilled]: (state, action) => {\n      const commentsWithoutReplies = action.payload.reduce((acc, comment) => {\n        const { replies, ...commentWithoutReplies } = comment;\n        return acc.concat(commentWithoutReplies);\n      }, []);\n      return commentsWithoutReplies;\n    },\n    [addComment.fulfilled]: (state, action) => {\n      state.push(action.payload);\n    },\n  },\n});\n\nexport default commentSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}
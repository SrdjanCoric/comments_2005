{"ast":null,"code":"// const replies = (state = [], action) => {\n//   switch (action.type) {\n//     case \"COMMENTS_RECEIVED\": {\n//       const replies = action.payload.comments.reduce((acc, comm) => {\n//         const { replies } = comm;\n//         return acc.concat(replies);\n//       }, []);\n//       return replies;\n//     }\n//     case \"REPLIES_ADDED\": {\n//       return state.concat(action.payload.replies);\n//     }\n//     default: {\n//       return state;\n//     }\n//   }\n// };\n// export default replies;\n// const comments = (state = [], action) => {\n//   switch (action.type) {\n//     case \"COMMENTS_RECEIVED\": {\n//       const commentsWithoutReplies = action.payload.comments.reduce(\n//         (acc, comm) => {\n//           const { replies, ...commentWithoutReplies } = comm;\n//           return acc.concat(commentWithoutReplies);\n//         },\n//         []\n//       );\n//       console.log(commentsWithoutReplies);\n//       console.log(action.payload.comments);\n//       return commentsWithoutReplies;\n//     }\n//     default: {\n//       return state;\n//     }\n//     case \"COMMENT_ADDED\": {\n//       return state.concat(action.payload.newComment);\n//     }\n//   }\n// };\n// export default comments;\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport { getComments } from \"./comments\";\nconst initialState = [];\nconst replySlice = createSlice({\n  name: \"replies\",\n  initialState,\n  reducers: {\n    addReplies(state, action) {\n      console.log(\"here\");\n      return state.concat(action.payload);\n    }\n\n  },\n  extraReducers: {\n    [getComments]: (state, action) => {\n      return action.payload.reduce((acc, comm) => {\n        const {\n          replies\n        } = comm;\n        return acc.concat(replies);\n      }, []);\n    }\n  }\n});\nexport const {\n  getReplies,\n  addReplies\n} = replySlice.actions;\nexport default replySlice.reducer;","map":{"version":3,"sources":["/Users/srdjancoric/Dropbox/Capstone_Support_Final/2205/comments_exercise_boilerplate/client/src/lib/reducers/replies.js"],"names":["createSlice","getComments","initialState","replySlice","name","reducers","addReplies","state","action","console","log","concat","payload","extraReducers","reduce","acc","comm","replies","getReplies","actions","reducer"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,WAAT,QAA4B,YAA5B;AACA,MAAMC,YAAY,GAAG,EAArB;AAEA,MAAMC,UAAU,GAAGH,WAAW,CAAC;AAC7BI,EAAAA,IAAI,EAAE,SADuB;AAE7BF,EAAAA,YAF6B;AAG7BG,EAAAA,QAAQ,EAAE;AACRC,IAAAA,UAAU,CAACC,KAAD,EAAQC,MAAR,EAAgB;AACxBC,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACA,aAAOH,KAAK,CAACI,MAAN,CAAaH,MAAM,CAACI,OAApB,CAAP;AACD;;AAJO,GAHmB;AAS7BC,EAAAA,aAAa,EAAE;AACb,KAACZ,WAAD,GAAe,CAACM,KAAD,EAAQC,MAAR,KAAmB;AAChC,aAAOA,MAAM,CAACI,OAAP,CAAeE,MAAf,CAAsB,CAACC,GAAD,EAAMC,IAAN,KAAe;AAC1C,cAAM;AAAEC,UAAAA;AAAF,YAAcD,IAApB;AACA,eAAOD,GAAG,CAACJ,MAAJ,CAAWM,OAAX,CAAP;AACD,OAHM,EAGJ,EAHI,CAAP;AAID;AANY;AATc,CAAD,CAA9B;AAmBA,OAAO,MAAM;AAAEC,EAAAA,UAAF;AAAcZ,EAAAA;AAAd,IAA6BH,UAAU,CAACgB,OAA9C;AACP,eAAehB,UAAU,CAACiB,OAA1B","sourcesContent":["// const replies = (state = [], action) => {\n//   switch (action.type) {\n//     case \"COMMENTS_RECEIVED\": {\n//       const replies = action.payload.comments.reduce((acc, comm) => {\n//         const { replies } = comm;\n//         return acc.concat(replies);\n//       }, []);\n//       return replies;\n//     }\n//     case \"REPLIES_ADDED\": {\n//       return state.concat(action.payload.replies);\n//     }\n//     default: {\n//       return state;\n//     }\n//   }\n// };\n\n// export default replies;\n\n// const comments = (state = [], action) => {\n//   switch (action.type) {\n//     case \"COMMENTS_RECEIVED\": {\n//       const commentsWithoutReplies = action.payload.comments.reduce(\n//         (acc, comm) => {\n//           const { replies, ...commentWithoutReplies } = comm;\n//           return acc.concat(commentWithoutReplies);\n//         },\n//         []\n//       );\n//       console.log(commentsWithoutReplies);\n//       console.log(action.payload.comments);\n//       return commentsWithoutReplies;\n//     }\n//     default: {\n//       return state;\n//     }\n//     case \"COMMENT_ADDED\": {\n//       return state.concat(action.payload.newComment);\n//     }\n//   }\n// };\n\n// export default comments;\n\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport { getComments } from \"./comments\";\nconst initialState = [];\n\nconst replySlice = createSlice({\n  name: \"replies\",\n  initialState,\n  reducers: {\n    addReplies(state, action) {\n      console.log(\"here\");\n      return state.concat(action.payload);\n    },\n  },\n  extraReducers: {\n    [getComments]: (state, action) => {\n      return action.payload.reduce((acc, comm) => {\n        const { replies } = comm;\n        return acc.concat(replies);\n      }, []);\n    },\n  },\n});\n\nexport const { getReplies, addReplies } = replySlice.actions;\nexport default replySlice.reducer;\n"]},"metadata":{},"sourceType":"module"}
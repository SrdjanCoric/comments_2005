{"ast":null,"code":"// const comments = (state = [], action) => {\n//   switch (action.type) {\n//     case \"COMMENTS_RECEIVED\": {\n//       const commentsWithoutReplies = action.payload.comments.reduce(\n//         (acc, comm) => {\n//           const { replies, ...commentWithoutReplies } = comm;\n//           return acc.concat(commentWithoutReplies);\n//         },\n//         []\n//       );\n//       console.log(commentsWithoutReplies);\n//       console.log(action.payload.comments);\n//       return commentsWithoutReplies;\n//     }\n//     default: {\n//       return state;\n//     }\n//     case \"COMMENT_ADDED\": {\n//       return state.concat(action.payload.newComment);\n//     }\n//   }\n// };\n// export default comments;\nimport { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = [];\nconst commentSlice = createSlice({\n  name: \"comments\",\n  initialState,\n  reducers: {\n    getComments(state, action) {\n      return action.payload.reduce((acc, comm) => {\n        const {\n          replies,\n          ...commentWithout\n        } = comm;\n        return acc.concat(commentWithout);\n      }, []);\n    },\n\n    createComment(state, action) {\n      state.push(action.payload);\n    }\n\n  }\n});\nexport const {\n  getComments,\n  createComment\n} = commentSlice.actions;\nexport default commentSlice.reducer;","map":{"version":3,"sources":["/Users/srdjancoric/Dropbox/Capstone_Support_Final/2205/comments_exercise_boilerplate/client/src/lib/reducers/comments.js"],"names":["createSlice","initialState","commentSlice","name","reducers","getComments","state","action","payload","reduce","acc","comm","replies","commentWithout","concat","createComment","push","actions","reducer"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,YAAY,GAAG,EAArB;AAEA,MAAMC,YAAY,GAAGF,WAAW,CAAC;AAC/BG,EAAAA,IAAI,EAAE,UADyB;AAE/BF,EAAAA,YAF+B;AAG/BG,EAAAA,QAAQ,EAAE;AACRC,IAAAA,WAAW,CAACC,KAAD,EAAQC,MAAR,EAAgB;AACzB,aAAOA,MAAM,CAACC,OAAP,CAAeC,MAAf,CAAsB,CAACC,GAAD,EAAMC,IAAN,KAAe;AAC1C,cAAM;AAAEC,UAAAA,OAAF;AAAW,aAAGC;AAAd,YAAiCF,IAAvC;AACA,eAAOD,GAAG,CAACI,MAAJ,CAAWD,cAAX,CAAP;AACD,OAHM,EAGJ,EAHI,CAAP;AAID,KANO;;AAORE,IAAAA,aAAa,CAACT,KAAD,EAAQC,MAAR,EAAgB;AAC3BD,MAAAA,KAAK,CAACU,IAAN,CAAWT,MAAM,CAACC,OAAlB;AACD;;AATO;AAHqB,CAAD,CAAhC;AAgBA,OAAO,MAAM;AAAEH,EAAAA,WAAF;AAAeU,EAAAA;AAAf,IAAiCb,YAAY,CAACe,OAApD;AACP,eAAef,YAAY,CAACgB,OAA5B","sourcesContent":["// const comments = (state = [], action) => {\n//   switch (action.type) {\n//     case \"COMMENTS_RECEIVED\": {\n//       const commentsWithoutReplies = action.payload.comments.reduce(\n//         (acc, comm) => {\n//           const { replies, ...commentWithoutReplies } = comm;\n//           return acc.concat(commentWithoutReplies);\n//         },\n//         []\n//       );\n//       console.log(commentsWithoutReplies);\n//       console.log(action.payload.comments);\n//       return commentsWithoutReplies;\n//     }\n//     default: {\n//       return state;\n//     }\n//     case \"COMMENT_ADDED\": {\n//       return state.concat(action.payload.newComment);\n//     }\n//   }\n// };\n\n// export default comments;\n\nimport { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = [];\n\nconst commentSlice = createSlice({\n  name: \"comments\",\n  initialState,\n  reducers: {\n    getComments(state, action) {\n      return action.payload.reduce((acc, comm) => {\n        const { replies, ...commentWithout } = comm;\n        return acc.concat(commentWithout);\n      }, []);\n    },\n    createComment(state, action) {\n      state.push(action.payload);\n    },\n  },\n});\n\nexport const { getComments, createComment } = commentSlice.actions;\nexport default commentSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}
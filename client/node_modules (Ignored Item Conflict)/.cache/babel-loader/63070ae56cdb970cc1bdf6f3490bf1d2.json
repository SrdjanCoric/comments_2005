{"ast":null,"code":"// const replies = (state = [], action) => {\n//   switch (action.type) {\n//     case \"COMMENTS_RECEIVED\": {\n//       const replies = action.payload.comments.reduce((acc, comm) => {\n//         const { replies } = comm;\n//         return acc.concat(replies);\n//       }, []);\n//       return replies;\n//     }\n//     case \"REPLIES_ADDED\": {\n//       return state.concat(action.payload.replies);\n//     }\n//     default: {\n//       return state;\n//     }\n//   }\n// };\n// export default replies;\n// const comments = (state = [], action) => {\n//   switch (action.type) {\n//     case \"COMMENTS_RECEIVED\": {\n//       const commentsWithoutReplies = action.payload.comments.reduce(\n//         (acc, comm) => {\n//           const { replies, ...commentWithoutReplies } = comm;\n//           return acc.concat(commentWithoutReplies);\n//         },\n//         []\n//       );\n//       console.log(commentsWithoutReplies);\n//       console.log(action.payload.comments);\n//       return commentsWithoutReplies;\n//     }\n//     default: {\n//       return state;\n//     }\n//     case \"COMMENT_ADDED\": {\n//       return state.concat(action.payload.newComment);\n//     }\n//   }\n// };\n// export default comments;\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport { fetchComments } from \"./comments\";\nconst initialState = [];\nconst replySlice = createSlice({\n  name: \"replies\",\n  initialState,\n  reducers: {\n    addReplies(state, action) {\n      return state.concat(action.payload);\n    }\n\n  },\n  extraReducers: {\n    [fetchComments.fulfilled]: (state, action) => {\n      return action.payload.reduce((acc, comm) => {\n        const {\n          replies\n        } = comm;\n        return acc.concat(replies);\n      }, []);\n    }\n  }\n});\nexport const {\n  addReplies\n} = replySlice.actions;\nexport default replySlice.reducer;","map":{"version":3,"sources":["/Users/srdjancoric/Dropbox/Capstone_Support_Final/2205/comments_exercise_boilerplate/client/src/lib/reducers/replies.js"],"names":["createSlice","fetchComments","initialState","replySlice","name","reducers","addReplies","state","action","concat","payload","extraReducers","fulfilled","reduce","acc","comm","replies","actions","reducer"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,aAAT,QAA8B,YAA9B;AACA,MAAMC,YAAY,GAAG,EAArB;AAEA,MAAMC,UAAU,GAAGH,WAAW,CAAC;AAC7BI,EAAAA,IAAI,EAAE,SADuB;AAE7BF,EAAAA,YAF6B;AAG7BG,EAAAA,QAAQ,EAAE;AACRC,IAAAA,UAAU,CAACC,KAAD,EAAQC,MAAR,EAAgB;AACxB,aAAOD,KAAK,CAACE,MAAN,CAAaD,MAAM,CAACE,OAApB,CAAP;AACD;;AAHO,GAHmB;AAQ7BC,EAAAA,aAAa,EAAE;AACb,KAACV,aAAa,CAACW,SAAf,GAA2B,CAACL,KAAD,EAAQC,MAAR,KAAmB;AAC5C,aAAOA,MAAM,CAACE,OAAP,CAAeG,MAAf,CAAsB,CAACC,GAAD,EAAMC,IAAN,KAAe;AAC1C,cAAM;AAAEC,UAAAA;AAAF,YAAcD,IAApB;AACA,eAAOD,GAAG,CAACL,MAAJ,CAAWO,OAAX,CAAP;AACD,OAHM,EAGJ,EAHI,CAAP;AAID;AANY;AARc,CAAD,CAA9B;AAkBA,OAAO,MAAM;AAAEV,EAAAA;AAAF,IAAiBH,UAAU,CAACc,OAAlC;AACP,eAAed,UAAU,CAACe,OAA1B","sourcesContent":["// const replies = (state = [], action) => {\n//   switch (action.type) {\n//     case \"COMMENTS_RECEIVED\": {\n//       const replies = action.payload.comments.reduce((acc, comm) => {\n//         const { replies } = comm;\n//         return acc.concat(replies);\n//       }, []);\n//       return replies;\n//     }\n//     case \"REPLIES_ADDED\": {\n//       return state.concat(action.payload.replies);\n//     }\n//     default: {\n//       return state;\n//     }\n//   }\n// };\n\n// export default replies;\n\n// const comments = (state = [], action) => {\n//   switch (action.type) {\n//     case \"COMMENTS_RECEIVED\": {\n//       const commentsWithoutReplies = action.payload.comments.reduce(\n//         (acc, comm) => {\n//           const { replies, ...commentWithoutReplies } = comm;\n//           return acc.concat(commentWithoutReplies);\n//         },\n//         []\n//       );\n//       console.log(commentsWithoutReplies);\n//       console.log(action.payload.comments);\n//       return commentsWithoutReplies;\n//     }\n//     default: {\n//       return state;\n//     }\n//     case \"COMMENT_ADDED\": {\n//       return state.concat(action.payload.newComment);\n//     }\n//   }\n// };\n\n// export default comments;\n\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport { fetchComments } from \"./comments\";\nconst initialState = [];\n\nconst replySlice = createSlice({\n  name: \"replies\",\n  initialState,\n  reducers: {\n    addReplies(state, action) {\n      return state.concat(action.payload);\n    },\n  },\n  extraReducers: {\n    [fetchComments.fulfilled]: (state, action) => {\n      return action.payload.reduce((acc, comm) => {\n        const { replies } = comm;\n        return acc.concat(replies);\n      }, []);\n    },\n  },\n});\n\nexport const { addReplies } = replySlice.actions;\nexport default replySlice.reducer;\n"]},"metadata":{},"sourceType":"module"}
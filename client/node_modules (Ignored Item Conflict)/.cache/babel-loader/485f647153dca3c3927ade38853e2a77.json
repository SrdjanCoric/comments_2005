{"ast":null,"code":"// const comments = (state = [], action) => {\n//   switch (action.type) {\n//     case \"COMMENTS_RECEIVED\": {\n//       const commentsWithoutReplies = action.payload.reduce((acc, comment) => {\n//         const { replies, ...commentWithoutReplies } = comment;\n//         return acc.concat(commentWithoutReplies);\n//       }, []);\n//       return commentsWithoutReplies;\n//     }\n//     case \"COMMENT_ADDED\": {\n//       return state.concat(action.payload);\n//     }\n//     default: {\n//       return state;\n//     }\n//   }\n// };\n// export default comments;\nimport { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport apiClient from \"../ApiClient\";\nconst initialState = [];\nexport const fetchComments = createAsyncThunk(\"fetchComments\", async () => {\n  const data = apiClient.getComments();\n  return data;\n});\nexport const addComment = createAsyncThunk(\"addComment\", async arg => {\n  const {\n    newComment,\n    callback\n  } = arg;\n  const data = apiClient.addComment(newComment);\n\n  if (callback) {\n    callback();\n  }\n\n  return data;\n});\nconst commentSlice = createSlice({\n  name: \"comment\",\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchComments.fulfilled, (state, action) => {\n      const commentsWithoutReplies = action.payload.reduce((acc, c) => {\n        const {\n          replies,\n          ...comm\n        } = c;\n        return acc.concat(comm);\n      }, []);\n      return commentsWithoutReplies;\n    });\n    builder.addCase(addComment.fulfilled, (state, action) => {\n      state.push(action.payload);\n    });\n  }\n});\nexport default commentSlice.reducer; // builder.addCase(fetchComments.fulfilled, (state, action) => {\n//   // const commentsWithoutReplies = action.payload.reduce((acc, comment) => {\n//   //   const { replies, ...commentWithoutReplies } = comment;\n//   //   return acc.concat(commentWithoutReplies);\n//   // }, []);\n//   // return commentsWithoutReplies;\n// }),","map":{"version":3,"sources":["/Users/srdjancoric/Dropbox/Capstone_Support_Final/2205/comments_exercise_boilerplate/client/src/lib/reducers/comments.js"],"names":["createSlice","createAsyncThunk","apiClient","initialState","fetchComments","data","getComments","addComment","arg","newComment","callback","commentSlice","name","reducers","extraReducers","builder","addCase","fulfilled","state","action","commentsWithoutReplies","payload","reduce","acc","c","replies","comm","concat","push","reducer"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AACA,OAAOC,SAAP,MAAsB,cAAtB;AAEA,MAAMC,YAAY,GAAG,EAArB;AAEA,OAAO,MAAMC,aAAa,GAAGH,gBAAgB,CAAC,eAAD,EAAkB,YAAY;AACzE,QAAMI,IAAI,GAAGH,SAAS,CAACI,WAAV,EAAb;AACA,SAAOD,IAAP;AACD,CAH4C,CAAtC;AAKP,OAAO,MAAME,UAAU,GAAGN,gBAAgB,CAAC,YAAD,EAAe,MAAOO,GAAP,IAAe;AACtE,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA;AAAd,MAA2BF,GAAjC;AACA,QAAMH,IAAI,GAAGH,SAAS,CAACK,UAAV,CAAqBE,UAArB,CAAb;;AACA,MAAIC,QAAJ,EAAc;AACZA,IAAAA,QAAQ;AACT;;AACD,SAAOL,IAAP;AACD,CAPyC,CAAnC;AASP,MAAMM,YAAY,GAAGX,WAAW,CAAC;AAC/BY,EAAAA,IAAI,EAAE,SADyB;AAE/BT,EAAAA,YAF+B;AAG/BU,EAAAA,QAAQ,EAAE,EAHqB;AAI/BC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CAACC,OAAR,CAAgBZ,aAAa,CAACa,SAA9B,EAAyC,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC1D,YAAMC,sBAAsB,GAAGD,MAAM,CAACE,OAAP,CAAeC,MAAf,CAAsB,CAACC,GAAD,EAAMC,CAAN,KAAY;AAC/D,cAAM;AAAEC,UAAAA,OAAF;AAAW,aAAGC;AAAd,YAAuBF,CAA7B;AACA,eAAOD,GAAG,CAACI,MAAJ,CAAWD,IAAX,CAAP;AACD,OAH8B,EAG5B,EAH4B,CAA/B;AAIA,aAAON,sBAAP;AACD,KAND;AAOAL,IAAAA,OAAO,CAACC,OAAR,CAAgBT,UAAU,CAACU,SAA3B,EAAsC,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACvDD,MAAAA,KAAK,CAACU,IAAN,CAAWT,MAAM,CAACE,OAAlB;AACD,KAFD;AAGD;AAf8B,CAAD,CAAhC;AAkBA,eAAeV,YAAY,CAACkB,OAA5B,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// const comments = (state = [], action) => {\n//   switch (action.type) {\n//     case \"COMMENTS_RECEIVED\": {\n//       const commentsWithoutReplies = action.payload.reduce((acc, comment) => {\n//         const { replies, ...commentWithoutReplies } = comment;\n//         return acc.concat(commentWithoutReplies);\n//       }, []);\n//       return commentsWithoutReplies;\n//     }\n//     case \"COMMENT_ADDED\": {\n//       return state.concat(action.payload);\n//     }\n//     default: {\n//       return state;\n//     }\n//   }\n// };\n\n// export default comments;\n\nimport { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport apiClient from \"../ApiClient\";\n\nconst initialState = [];\n\nexport const fetchComments = createAsyncThunk(\"fetchComments\", async () => {\n  const data = apiClient.getComments();\n  return data;\n});\n\nexport const addComment = createAsyncThunk(\"addComment\", async (arg) => {\n  const { newComment, callback } = arg;\n  const data = apiClient.addComment(newComment);\n  if (callback) {\n    callback();\n  }\n  return data;\n});\n\nconst commentSlice = createSlice({\n  name: \"comment\",\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(fetchComments.fulfilled, (state, action) => {\n      const commentsWithoutReplies = action.payload.reduce((acc, c) => {\n        const { replies, ...comm } = c;\n        return acc.concat(comm);\n      }, []);\n      return commentsWithoutReplies;\n    });\n    builder.addCase(addComment.fulfilled, (state, action) => {\n      state.push(action.payload);\n    });\n  },\n});\n\nexport default commentSlice.reducer;\n// builder.addCase(fetchComments.fulfilled, (state, action) => {\n//   // const commentsWithoutReplies = action.payload.reduce((acc, comment) => {\n//   //   const { replies, ...commentWithoutReplies } = comment;\n//   //   return acc.concat(commentWithoutReplies);\n//   // }, []);\n//   // return commentsWithoutReplies;\n// }),\n"]},"metadata":{},"sourceType":"module"}
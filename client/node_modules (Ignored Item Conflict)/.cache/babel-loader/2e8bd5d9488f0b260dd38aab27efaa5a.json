{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport apiClient from \"../../lib/ApiClient\";\nimport { fetchComments } from \"../comments/comments\";\nconst initialState = [];\nexport const addReplies = createAsyncThunk(\"replies/addReplies\", async id => {\n  const data = apiClient.getReplies(id);\n  return data;\n});\nconst replySlice = createSlice({\n  name: \"replies\",\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchComments.fulfilled, (state, action) => {\n      const replies = action.payload.reduce((acc, comment) => {\n        const {\n          replies\n        } = comment;\n        return acc.concat(replies);\n      }, []);\n      return replies;\n    });\n    builder.addCase(addReplies.fulfilled, (state, action) => {\n      state.push(action.payload);\n    });\n  }\n});\nexport default replySlice.reducer;","map":{"version":3,"sources":["/Users/srdjancoric/Dropbox/Capstone_Support_Final/2205/comments_exercise_boilerplate/client/src/features/replies/replies.js"],"names":["createAsyncThunk","createSlice","apiClient","fetchComments","initialState","addReplies","id","data","getReplies","replySlice","name","reducers","extraReducers","builder","addCase","fulfilled","state","action","replies","payload","reduce","acc","comment","concat","push","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AACA,SAASC,aAAT,QAA8B,sBAA9B;AAEA,MAAMC,YAAY,GAAG,EAArB;AAEA,OAAO,MAAMC,UAAU,GAAGL,gBAAgB,CAAC,oBAAD,EAAuB,MAAOM,EAAP,IAAc;AAC7E,QAAMC,IAAI,GAAGL,SAAS,CAACM,UAAV,CAAqBF,EAArB,CAAb;AACA,SAAOC,IAAP;AACD,CAHyC,CAAnC;AAKP,MAAME,UAAU,GAAGR,WAAW,CAAC;AAC7BS,EAAAA,IAAI,EAAE,SADuB;AAE7BN,EAAAA,YAF6B;AAG7BO,EAAAA,QAAQ,EAAE,EAHmB;AAI7BC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CAACC,OAAR,CAAgBX,aAAa,CAACY,SAA9B,EAAyC,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC1D,YAAMC,OAAO,GAAGD,MAAM,CAACE,OAAP,CAAeC,MAAf,CAAsB,CAACC,GAAD,EAAMC,OAAN,KAAkB;AACtD,cAAM;AAAEJ,UAAAA;AAAF,YAAcI,OAApB;AACA,eAAOD,GAAG,CAACE,MAAJ,CAAWL,OAAX,CAAP;AACD,OAHe,EAGb,EAHa,CAAhB;AAIA,aAAOA,OAAP;AACD,KAND;AAOAL,IAAAA,OAAO,CAACC,OAAR,CAAgBT,UAAU,CAACU,SAA3B,EAAsC,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACvDD,MAAAA,KAAK,CAACQ,IAAN,CAAWP,MAAM,CAACE,OAAlB;AACD,KAFD;AAGD;AAf4B,CAAD,CAA9B;AAkBA,eAAeV,UAAU,CAACgB,OAA1B","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport apiClient from \"../../lib/ApiClient\";\nimport { fetchComments } from \"../comments/comments\";\n\nconst initialState = [];\n\nexport const addReplies = createAsyncThunk(\"replies/addReplies\", async (id) => {\n  const data = apiClient.getReplies(id);\n  return data;\n});\n\nconst replySlice = createSlice({\n  name: \"replies\",\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(fetchComments.fulfilled, (state, action) => {\n      const replies = action.payload.reduce((acc, comment) => {\n        const { replies } = comment;\n        return acc.concat(replies);\n      }, []);\n      return replies;\n    });\n    builder.addCase(addReplies.fulfilled, (state, action) => {\n      state.push(action.payload);\n    });\n  },\n});\n\nexport default replySlice.reducer;\n"]},"metadata":{},"sourceType":"module"}
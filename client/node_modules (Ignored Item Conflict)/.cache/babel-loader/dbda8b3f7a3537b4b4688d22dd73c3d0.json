{"ast":null,"code":"// const replies = (state = [], action) => {\n//   switch (action.type) {\n//     case \"COMMENTS_RECEIVED\": {\n//       // action.payload == comments\n//       const replies = action.payload.reduce((acc, comment) => {\n//         const { replies } = comment;\n//         return acc.concat(replies);\n//       }, []);\n//       return replies;\n//     }\n//     case \"REPLIES_RECEIVED\": {\n//       return state.concat(action.payload);\n//     }\n//     default: {\n//       return state;\n//     }\n//   }\n// };\n// export default replies;\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport { fetchComments } from \"./comments\";\nconst initialState = [];\nconst replySlice = createSlice({\n  name: \"reply\",\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [fetchComments.fulfilled]: (state, action) => {\n      const replies = action.payload.reduce((acc, comment) => {\n        const {\n          replies\n        } = comment;\n        return acc.concat(replies);\n      }, []);\n      return replies;\n    }\n  }\n});\nexport default replySlice.reducer;","map":{"version":3,"sources":["/Users/srdjancoric/Dropbox/Capstone_Support_Final/2205/comments_exercise_boilerplate/client/src/lib/reducers/replies.js"],"names":["createSlice","fetchComments","initialState","replySlice","name","reducers","extraReducers","fulfilled","state","action","replies","payload","reduce","acc","comment","concat","reducer"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,aAAT,QAA8B,YAA9B;AAEA,MAAMC,YAAY,GAAG,EAArB;AAEA,MAAMC,UAAU,GAAGH,WAAW,CAAC;AAC7BI,EAAAA,IAAI,EAAE,OADuB;AAE7BF,EAAAA,YAF6B;AAG7BG,EAAAA,QAAQ,EAAE,EAHmB;AAI7BC,EAAAA,aAAa,EAAE;AACb,KAACL,aAAa,CAACM,SAAf,GAA2B,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC5C,YAAMC,OAAO,GAAGD,MAAM,CAACE,OAAP,CAAeC,MAAf,CAAsB,CAACC,GAAD,EAAMC,OAAN,KAAkB;AACtD,cAAM;AAAEJ,UAAAA;AAAF,YAAcI,OAApB;AACA,eAAOD,GAAG,CAACE,MAAJ,CAAWL,OAAX,CAAP;AACD,OAHe,EAGb,EAHa,CAAhB;AAIA,aAAOA,OAAP;AACD;AAPY;AAJc,CAAD,CAA9B;AAeA,eAAeP,UAAU,CAACa,OAA1B","sourcesContent":["// const replies = (state = [], action) => {\n//   switch (action.type) {\n//     case \"COMMENTS_RECEIVED\": {\n//       // action.payload == comments\n//       const replies = action.payload.reduce((acc, comment) => {\n//         const { replies } = comment;\n//         return acc.concat(replies);\n//       }, []);\n//       return replies;\n//     }\n//     case \"REPLIES_RECEIVED\": {\n//       return state.concat(action.payload);\n//     }\n//     default: {\n//       return state;\n//     }\n//   }\n// };\n\n// export default replies;\n\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport { fetchComments } from \"./comments\";\n\nconst initialState = [];\n\nconst replySlice = createSlice({\n  name: \"reply\",\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [fetchComments.fulfilled]: (state, action) => {\n      const replies = action.payload.reduce((acc, comment) => {\n        const { replies } = comment;\n        return acc.concat(replies);\n      }, []);\n      return replies;\n    },\n  },\n});\n\nexport default replySlice.reducer;\n"]},"metadata":{},"sourceType":"module"}